# python version 1.0						DO NOT EDIT
#
# Generated by smidump version 0.4.8:
#
#   smidump -f python IPV6-TC

FILENAME = "/opt/librenms/mibs/IPV6-TC"

MIB = {
    "moduleName" : "IPV6-TC",

    "IPV6-TC" : {
        "nodetype" : "module",
        "language" : "SMIv2",
    },

    "imports" : (
        {"module" : "SNMPv2-SMI", "name" : "Integer32"},
        {"module" : "SNMPv2-TC", "name" : "TEXTUAL-CONVENTION"},
    ),

    "typedefs" : {
        "Ipv6Address" : {
            "basetype" : "OctetString",
            "status" : "obsolete",
            "ranges" : [
            {
                "min" : "16",
                "max" : "16"
            },
            ],
            "range" : {
                "min" : "16",
                "max" : "16"
            },
            "format" : "2x:",
            "description" :
                """This data type is used to model IPv6 addresses.
This is a binary string of 16 octets in network
byte-order.

This object is obsoleted by INET-ADDRESS-MIB::InetAddress.""",
        },
        "Ipv6AddressPrefix" : {
            "basetype" : "OctetString",
            "status" : "obsolete",
            "ranges" : [
            {
                "min" : "0",
                "max" : "16"
            },
            ],
            "range" : {
                "min" : "0",
                "max" : "16"
            },
            "format" : "2x:",
            "description" :
                """This data type is used to model IPv6 address
prefixes.  This is a binary string of up to 16
octets in network byte-order.
This object is obsoleted by INET-ADDRESS-MIB::InetAddress.""",
        },
        "Ipv6AddressIfIdentifier" : {
            "basetype" : "OctetString",
            "status" : "obsolete",
            "ranges" : [
            {
                "min" : "0",
                "max" : "8"
            },
            ],
            "range" : {
                "min" : "0",
                "max" : "8"
            },
            "format" : "2x:",
            "description" :
                """This data type is used to model IPv6 address
interface identifiers.  This is a binary string
 of up to 8 octets in network byte-order.

This object is obsoleted by IP-MIB::Ipv6AddressIfIdentifierTC.""",
        },
        "Ipv6IfIndex" : {
            "basetype" : "Integer32",
            "status" : "obsolete",
            "ranges" : [
            {
                "min" : "1",
                "max" : "2147483647"
            },
            ],
            "range" : {
                "min" : "1",
                "max" : "2147483647"
            },
            "format" : "d",
            "description" :
                """A unique value, greater than zero for each
internetwork-layer interface in the managed
system.  It is recommended that values are assigned
contiguously starting from 1.  The value for each
internetwork-layer interface must remain constant
at least from one re-initialization of the entity's
network management system to the next
re-initialization.

This object is obsoleted by IF-MIB::InterfaceIndex.""",
        },
        "Ipv6IfIndexOrZero" : {
            "basetype" : "Integer32",
            "status" : "obsolete",
            "ranges" : [
            {
                "min" : "0",
                "max" : "2147483647"
            },
            ],
            "range" : {
                "min" : "0",
                "max" : "2147483647"
            },
            "format" : "d",
            "description" :
                """This textual convention is an extension of the
Ipv6IfIndex convention.  The latter defines
a greater than zero value used to identify an IPv6
interface in the managed system.  This extension
permits the additional value of zero.  The value
zero is object-specific and must therefore be
defined as part of the description of any object
which uses this syntax.  Examples of the usage of
zero might include situations where interface was
unknown, or when none or all interfaces need to be
referenced.

This object is obsoleted by IF-MIB::InterfaceIndexOrZero.""",
        },
    }, # typedefs

}
