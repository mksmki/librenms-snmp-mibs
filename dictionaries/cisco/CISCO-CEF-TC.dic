# python version 1.0						DO NOT EDIT
#
# Generated by smidump version 0.4.8:
#
#   smidump -f python CISCO-CEF-TC

FILENAME = "/opt/librenms/mibs/cisco/CISCO-CEF-TC"

MIB = {
    "moduleName" : "CISCO-CEF-TC",

    "CISCO-CEF-TC" : {
        "nodetype" : "module",
        "language" : "SMIv2",
        "organization" :    
            """Cisco Systems, Inc.""",
        "contact" : 
            """Postal: Cisco Systems, Inc.
170 West Tasman Drive
San Jose, CA 95134-1706
USA

Tel: +1 800 553-NETS

E-mail: cs-cef@cisco.com""",
        "description" :
            """This MIB module defines Textual Conventions and
OBJECT-IDENTITIES for use in documents defining
management information base (MIBs) modules for 
managing Cisco Express Forwarding (CEF).""",
        "revisions" : (
            {
                "date" : "2005-09-30 00:00",
                "description" :
                    """Initial version of this MIB module.""",
            },
        ),
        "identity node" : "ciscoCefTextualConventions",
    },

    "imports" : (
        {"module" : "SNMPv2-SMI", "name" : "MODULE-IDENTITY"},
        {"module" : "SNMPv2-TC", "name" : "TEXTUAL-CONVENTION"},
        {"module" : "CISCO-SMI", "name" : "ciscoMgmt"},
    ),

    "typedefs" : {
        "CefIpVersion" : {
            "basetype" : "Enumeration",
            "status" : "current",
            "ipv4" : {
                "nodetype" : "namednumber",
                "number" : "1"
            },
            "ipv6" : {
                "nodetype" : "namednumber",
                "number" : "2"
            },
            "description" :
                """The version of CEF IP forwarding.""",
        },
        "CefAdjLinkType" : {
            "basetype" : "Enumeration",
            "status" : "current",
            "ipv4" : {
                "nodetype" : "namednumber",
                "number" : "1"
            },
            "ipv6" : {
                "nodetype" : "namednumber",
                "number" : "2"
            },
            "mpls" : {
                "nodetype" : "namednumber",
                "number" : "3"
            },
            "raw" : {
                "nodetype" : "namednumber",
                "number" : "4"
            },
            "unknown" : {
                "nodetype" : "namednumber",
                "number" : "5"
            },
            "description" :
                """Link type for the adjacency. The adjacency link type 
identifies protocol stack on neighbour device which will 
process packets fed through adjacency.""",
        },
        "CefAdjacencySource" : {
            "basetype" : "Bits",
            "status" : "current",
            "atom" : {
                "nodetype" : "namednumber",
                "number" : "0"
            },
            "linkRawAdj" : {
                "nodetype" : "namednumber",
                "number" : "1"
            },
            "ipPseudowireAdj" : {
                "nodetype" : "namednumber",
                "number" : "2"
            },
            "arp" : {
                "nodetype" : "namednumber",
                "number" : "3"
            },
            "p2pAdj" : {
                "nodetype" : "namednumber",
                "number" : "4"
            },
            "frMap" : {
                "nodetype" : "namednumber",
                "number" : "5"
            },
            "atmPVC" : {
                "nodetype" : "namednumber",
                "number" : "6"
            },
            "atmSVC" : {
                "nodetype" : "namednumber",
                "number" : "7"
            },
            "atmTVC" : {
                "nodetype" : "namednumber",
                "number" : "8"
            },
            "nbma" : {
                "nodetype" : "namednumber",
                "number" : "9"
            },
            "mpoa" : {
                "nodetype" : "namednumber",
                "number" : "10"
            },
            "atmBundle" : {
                "nodetype" : "namednumber",
                "number" : "11"
            },
            "lec" : {
                "nodetype" : "namednumber",
                "number" : "12"
            },
            "nhrp" : {
                "nodetype" : "namednumber",
                "number" : "13"
            },
            "ipv6ND" : {
                "nodetype" : "namednumber",
                "number" : "14"
            },
            "cmcc" : {
                "nodetype" : "namednumber",
                "number" : "15"
            },
            "ipv6SixtoFourTunnel" : {
                "nodetype" : "namednumber",
                "number" : "16"
            },
            "ipv6IsaTapTunnel" : {
                "nodetype" : "namednumber",
                "number" : "17"
            },
            "ipv6AutoTunnel" : {
                "nodetype" : "namednumber",
                "number" : "18"
            },
            "fibLc" : {
                "nodetype" : "namednumber",
                "number" : "19"
            },
            "virtual" : {
                "nodetype" : "namednumber",
                "number" : "20"
            },
            "multicast" : {
                "nodetype" : "namednumber",
                "number" : "21"
            },
            "unknown" : {
                "nodetype" : "namednumber",
                "number" : "22"
            },
            "description" :
                """The mechanism by which the adjacency is learned.
As the mechanism of learning the adjacency can be
multiple (e.g. 'arp' and 'atmPVC'), hence the 
value of this object represents the bit mask of
adjacency sources.""",
        },
        "CefPathType" : {
            "basetype" : "Enumeration",
            "status" : "current",
            "receive" : {
                "nodetype" : "namednumber",
                "number" : "1"
            },
            "connectedPrefix" : {
                "nodetype" : "namednumber",
                "number" : "2"
            },
            "attachedPrefix" : {
                "nodetype" : "namednumber",
                "number" : "3"
            },
            "attachedHost" : {
                "nodetype" : "namednumber",
                "number" : "4"
            },
            "attachedNexthop" : {
                "nodetype" : "namednumber",
                "number" : "5"
            },
            "recursiveNexthop" : {
                "nodetype" : "namednumber",
                "number" : "6"
            },
            "adjacencyPrefix" : {
                "nodetype" : "namednumber",
                "number" : "7"
            },
            "specialPrefix" : {
                "nodetype" : "namednumber",
                "number" : "8"
            },
            "unknown" : {
                "nodetype" : "namednumber",
                "number" : "9"
            },
            "description" :
                """Type of the CEF Path.
receive(1)          : path for the address
                      configured on any of the
                      interface in the device.

connectedPrefix(2)  : connected prefix path

attachedPrefix(3)   : attached prefix path

attachedHost(4)     : attached host path 

attachedNexthop(5)  : attached next hop path

recursiveNexthop(6) : recursive next hop path

adjacencyPrefix(7)  : adjacency prefix path

specialPrefix(8)    : special prefix path

unknown(9):         : unknown  path
.""",
        },
        "CefPrefixSearchState" : {
            "basetype" : "Enumeration",
            "status" : "current",
            "running" : {
                "nodetype" : "namednumber",
                "number" : "1"
            },
            "matchFound" : {
                "nodetype" : "namednumber",
                "number" : "2"
            },
            "noMatchFound" : {
                "nodetype" : "namednumber",
                "number" : "3"
            },
            "description" :
                """The state of prefix search operation. 
The description of each state is given below:

  running(1)      : this state signifies that a prefix 
                    search request is running.

  matchFound(2)   : this state signifies that a prefix 
                    search request is completed and a prefix
                    match has been found.

  noMatchFound(3) : this state signifies that a prefix 
                    search request is completed and a prefix
                    match has not been found.""",
        },
        "CefForwardingElementSpecialType" : {
            "basetype" : "Enumeration",
            "status" : "current",
            "illegal" : {
                "nodetype" : "namednumber",
                "number" : "1"
            },
            "punt" : {
                "nodetype" : "namednumber",
                "number" : "2"
            },
            "drop" : {
                "nodetype" : "namednumber",
                "number" : "3"
            },
            "discard" : {
                "nodetype" : "namednumber",
                "number" : "4"
            },
            "null" : {
                "nodetype" : "namednumber",
                "number" : "5"
            },
            "glean" : {
                "nodetype" : "namednumber",
                "number" : "6"
            },
            "unresolved" : {
                "nodetype" : "namednumber",
                "number" : "7"
            },
            "noRoute" : {
                "nodetype" : "namednumber",
                "number" : "8"
            },
            "none" : {
                "nodetype" : "namednumber",
                "number" : "9"
            },
            "description" :
                """Type of special forwarding element 

illegal(1)   : illegal special forwarding element.
               the packet will be dropped.

punt(2)      : the packet will be punted to the
               next switching path

drop(3)      : not supported for Destination IP to next hop
               interface and the packet will be dropped

discard(4)   : the packet is for Destination IP through
               next hop interface and it will be discarded

null(5)      : the packet is for Destination IP to null0,
               it will be dropped

glean(6)     : an attempt will be made to complete the
               encapsulation string through address 
               resolution

unResolved(7): unresolved forwarding element.
               the packet will be dropped unconditionally. 

noRoute(8)   : no route forwarding element.
               This forwarding element will result
               in rate limited punts to the next
               switching path(to generate ICMP 
               no route message) 

none(9)      : not a special forwarding element and
               the value of this object should be
               ignored """,
        },
        "CefMplsLabelList" : {
            "basetype" : "OctetString",
            "status" : "current",
            "ranges" : [
            {
                "min" : "0",
                "max" : "255"
            },
            ],
            "range" : {
                "min" : "0",
                "max" : "255"
            },
            "description" :
                """This contains a list of MPLS Labels, 
each separated by the ';' (semi-colon) character.  

MPLS Label values are in accordance with the
MplsLabel TEXTUAL-CONVENTION defined in the
MPLS-TC-MIB.

The following is en example containing two MPLS labels: 
  
   4294;100
			
An empty string value for this object indicates
no MPLS Labels in this list. """,
        },
        "CefAdminStatus" : {
            "basetype" : "Enumeration",
            "status" : "current",
            "enabled" : {
                "nodetype" : "namednumber",
                "number" : "1"
            },
            "disabled" : {
                "nodetype" : "namednumber",
                "number" : "2"
            },
            "description" :
                """Admin status of CEF. The admin status of CEF
may differ from the oper status of CEF depending
upon the success of the admin operation.""",
        },
        "CefOperStatus" : {
            "basetype" : "Enumeration",
            "status" : "current",
            "up" : {
                "nodetype" : "namednumber",
                "number" : "1"
            },
            "down" : {
                "nodetype" : "namednumber",
                "number" : "2"
            },
            "description" :
                """Operational status of CEF.""",
        },
        "CefFailureReason" : {
            "basetype" : "Enumeration",
            "status" : "current",
            "none" : {
                "nodetype" : "namednumber",
                "number" : "1"
            },
            "mallocFailure" : {
                "nodetype" : "namednumber",
                "number" : "2"
            },
            "hwFailure" : {
                "nodetype" : "namednumber",
                "number" : "3"
            },
            "keepaliveFailure" : {
                "nodetype" : "namednumber",
                "number" : "4"
            },
            "noMsgBuffer" : {
                "nodetype" : "namednumber",
                "number" : "5"
            },
            "invalidMsgSize" : {
                "nodetype" : "namednumber",
                "number" : "6"
            },
            "internalError" : {
                "nodetype" : "namednumber",
                "number" : "7"
            },
            "description" :
                """Reason of CEF Failure:

none(1)                : no failure 

mallocFailure(2)       : memory allocation failed for CEF

hwFailure(3)           : hardware interface failure 
                         for CEF

keepaliveFailure(4)    : keepalive was not received from 
                         the CEF peer entity

noMsgBuffer(5)         : message buffers were exhausted 
                         while preparing IPC message to be 
                         sent to the CEF peer entity

invalidMsgSize(6)      : IPC message was received with 
                         invalid size from the
                         CEF peer entity

internalError(7)       : Some other internal error was 
                         detected for CEF""",
        },
        "CefCCType" : {
            "basetype" : "Enumeration",
            "status" : "current",
            "lcDetect" : {
                "nodetype" : "namednumber",
                "number" : "1"
            },
            "scanFibLcRp" : {
                "nodetype" : "namednumber",
                "number" : "2"
            },
            "scanFibRpLc" : {
                "nodetype" : "namednumber",
                "number" : "3"
            },
            "scanRibFib" : {
                "nodetype" : "namednumber",
                "number" : "4"
            },
            "scanFibRib" : {
                "nodetype" : "namednumber",
                "number" : "5"
            },
            "scanFibHwSw" : {
                "nodetype" : "namednumber",
                "number" : "6"
            },
            "scanFibSwHw" : {
                "nodetype" : "namednumber",
                "number" : "7"
            },
            "fullScanRibFib" : {
                "nodetype" : "namednumber",
                "number" : "8"
            },
            "fullScanFibRib" : {
                "nodetype" : "namednumber",
                "number" : "9"
            },
            "fullScanFibRpLc" : {
                "nodetype" : "namednumber",
                "number" : "10"
            },
            "fullScanFibLcRp" : {
                "nodetype" : "namednumber",
                "number" : "11"
            },
            "fullScanFibHwSw" : {
                "nodetype" : "namednumber",
                "number" : "12"
            },
            "fullScanFibSwHw" : {
                "nodetype" : "namednumber",
                "number" : "13"
            },
            "description" :
                """Type of the consistency checker.

lcDetect         : This is an active consistency checker
                   which is triggered when a packet cannot 
                   be forwarded because the prefix is not
                   in the forwarding table. It Detects 
                   missing prefixes on the linecard CEF 
                   database by sending the missing prefixes 
                   to the RP.
              
scanFibLcRp      : This is an passive consistency checker
                   which performs a passive scan check of
                   the table on the line card.

                   This consistency checker operates on 
                   the line card by examining the FIB table 
                   for a configurable time period and sending 
                   the next n prefixes to the RP. 

scanFibRpLc      : This is an passive consistency checker
                   which performs a passive scan check of
                   RP by examining the FIB table for 
                   a configurable period and
                   sending the next n prefixes to the 
                   line card. 

scanRibFib       : This is an passive consistency checker
                   which compares routing information base 
                   (RIB) to the FIB table at a configurable
                   interval and provides the number of 
                   entries missing from the FIB table. 

scanFibRib       : This is an passive consistency checker
                   which compares FIB Tables to the 
                   routing information base (RIB) 
                   at a configurable interval and provides 
                   the number of entries missing from the 
                   FIB table. 

scanFibHwSw      : This is an passive consistency checker
                   which compares FIB Tables in hardware
                   to the FIB Tables in RP.

scanFibSwHw      : This is an passive consistency checker
                   which compares FIB Tables in RP
                   to the FIB Tables in hardware.

fullScanRibFib   : This is an active consistency checker
                   which is triggered by Management Station 
                   request. It compares the entire routing 
                   information base (RIB) to the FIB table
                   and provide the number of entries missing
                    from the FIB Table.

fullScanFibRib   : This is an active consistency checker
                   which is triggered by Management Station 
                   request. It compares the FIB table to the 
                   routing information base (RIB)
                   and provide the number of entries missing
                   from the FIB Table.

fullScanFibRpLc  : This is an active consistency checker
                   which is triggered by Management Station 
                   request. It compares the RP FIB Table 
                   with FIB Table on each LC and report 
                   inconsistencies.
                
fullScanFibLcRp  : This is an active consistency checker
                   which is triggered by Management Station 
                   request. It compares the Fib Table on LC 
                   with FIB table on RP and report 
                   inconsistencies.

fullScanFibHwSw  : This is an active consistency checker
                   which is triggered by Management Station 
                   request. It compares the Fib Table in 
                   hardware with FIB table in RP and report 
                   inconsistencies.

fullScanFibSwHw  : This is an active consistency checker
                   which is triggered by Management Station 
                   request. It compares the Fib Table in RP 
                   with FIB table in hardware and report 
                   inconsistencies.""",
        },
        "CefCCAction" : {
            "basetype" : "Enumeration",
            "status" : "current",
            "ccActionStart" : {
                "nodetype" : "namednumber",
                "number" : "1"
            },
            "ccActionAbort" : {
                "nodetype" : "namednumber",
                "number" : "2"
            },
            "ccActionNone" : {
                "nodetype" : "namednumber",
                "number" : "3"
            },
            "description" :
                """The action to be performed for the consistency
checkers.

  ccActionStart(1)   :  start the Consistency checker
                        operation.

  ccActionAbort(2)   :  abort the Consistency checker 
                        operation. After aborting, the 
                        active process must recover. 
                        This can take some time, and 
                        during this period, the scan 
                        cannot be restarted.

  ccActionNone(3)    :  no operation is being performed 
                        on consistency checkers.""",
        },
        "CefCCStatus" : {
            "basetype" : "Enumeration",
            "status" : "current",
            "ccStatusIdle" : {
                "nodetype" : "namednumber",
                "number" : "1"
            },
            "ccStatusRunning" : {
                "nodetype" : "namednumber",
                "number" : "2"
            },
            "ccStatusDone" : {
                "nodetype" : "namednumber",
                "number" : "3"
            },
            "description" :
                """The status of consistency checker operation. 
The description of each state is given below:

  ccStatusIdle(1)    :  this state signifies that
                        no consistency checker request
                        is being performed.

  ccStatusRunning(2) :  this state signifies that 
                        consistency checker request is 
                        in progress.

  ccStatusDone(3)     : this state signifies that 
                        consistency checker request is 
                        over. 
                      """,
        },
    }, # typedefs

    "nodes" : {
        "ciscoCefTextualConventions" : {
            "nodetype" : "node",
            "moduleName" : "CISCO-CEF-TC",
            "oid" : "1.3.6.1.4.1.9.9.493",
            "status" : "current",
        }, # node
    }, # nodes

}
